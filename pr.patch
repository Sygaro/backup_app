diff --git a/README.md b/README.md
index 0000000..0000000 100644
--- a/README.md
+++ b/README.md
@@ -1,35 +1,168 @@
-# backup_app
-
-For backup av garasjeport prosjekt kode og filer med mulighet for flere versjoner og opplasting til Dropbox
-## Installasjon
-
-```bash
-sudo apt update && sudo apt install git -y
-git clone https://github.com/Sygaro/backup_app
-python -m venv backup_app/venv
-cd backup_app
-source venv/bin/activate
-pip install -r requirements.txt
-deactivate
-cd ..
-cp backup_app/backup.sh .
-
-# Opprett token:
-# https://www.dropbox.com/developers/apps
-cp backup_app/env_mal backup_app/.env
-nano backup_app/.env
-```
-
-### Start backup
-
-Ingen parameter = alle versjoner
-versjon + tag = opplasting til Dropbox
-
-Ekesempel:
-```bash
-./backup.sh 1.06 Frontend_OK
-```
+# backup_app
+
+Fleksibel backup av valgfri katalog, med valgfritt prosjektnavn, valgfri versjon, **.backupignore/--exclude**, **retention** og valgfri **Dropbox-opplasting**.
+
+## Installasjon (RPi/Ubuntu/Debian)
+```bash
+sudo apt update && sudo apt install -y git python3-venv
+git clone https://github.com/Sygaro/backup_app
+cd backup_app
+python -m venv venv
+source venv/bin/activate
+pip install -r requirements.txt
+deactivate
+```
+
+> **Dropbox (valgfritt):**
+> - Opprett token på https://www.dropbox.com/developers/apps
+> - Kopiér miljømal og sett token:
+>   ```bash
+>   cp env_mal .env
+>   nano .env   # sett DROPBOX_TOKEN=...
+>   ```
+
+## Kjapp start
+**Standard ZIP-backup uten versjon (arkivnavn får dato):**
+```bash
+./backup.sh --source /home/pi/prosjektA --project prosjektA
+```
+
+**Med versjon og tag i filnavnet:**
+```bash
+./backup.sh --source /home/pi/prosjektA --project prosjektA \
+  --version 1.10 --tag Frontend_OK
+```
+
+**Ekskludering og skjulte filer:**
+```bash
+./backup.sh --source . --project mittprosjekt \
+  --exclude ".git/*" --exclude "venv/*" --include-hidden
+```
+
+**Retention (behold kun 10 siste arkiv):**
+```bash
+./backup.sh --source /home/pi/prosjektA --project prosjektA --keep 10
+```
+
+**Dropbox-opplasting (krever `.env` med `DROPBOX_TOKEN`):**
+```bash
+./backup.sh --source /home/pi/prosjektA --project prosjektA \
+  --version 1.11 --dropbox-path "/Apps/backup_app/prosjektA"
+```
+
+**Tar.gz i stedet for ZIP:**
+```bash
+./backup.sh --source /data --project datating --format tar.gz
+```
+
+**Tørrkjøring (skriver ingenting):**
+```bash
+./backup.sh --source /home/pi/prosjektA --project prosjektA --dry-run
+```
+
+## Filnavn og struktur
+Arkivnavn blir slik:
+```
+{project}[_v{versjon}]_{YYYYMMDD-HHMM}[_tag].zip
+```
+Det lages også en symlink `{project}_latest` (om filsystemet støtter det).
+
+## .backupignore
+Legg en `.backupignore` i roten av kildemappa for å ekskludere filer/mapper:
+```
+.git/*
+venv/*
+__pycache__/*
+*.log
+*.tmp
+node_modules/*
+dist/*
+build/*
+```
+Du kan kombinere med `--exclude`.
+
+## Miljøvariabler
+- `DROPBOX_TOKEN` – kreves for Dropbox-opplasting (leses fra `.env` om tilstede).
+
+## Kompatibilitet (gamle skript)
+Historiske skript (`backup_zip.py`, `dropbox_opplasting.py`) er beholdt som **wrappere** til ny funksjonalitet for å unngå brekk i eksisterende oppsett. De vil skrive en kort advarsel og delegere til ny løsning.
+
+## Lisens
+MIT
diff --git a/backup.sh b/backup.sh
index 0000000..0000000 100755
--- a/backup.sh
+++ b/backup.sh
@@ -1,14 +1,37 @@
-#!/usr/bin/env bash
-python3 backup_zip.py "$@"
+#!/usr/bin/env bash
+set -euo pipefail
+
+# Bruk: ./backup.sh [--project NAVN] --source STIDIR [flagg...]
+# Eksempel:
+#   ./backup.sh --source /home/pi/prosjektA --project prosjektA --version 1.06 --tag Frontend_OK
+
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+PY="$SCRIPT_DIR/venv/bin/python"
+
+if [[ ! -x "$PY" ]]; then
+  echo "Fant ikke venv på $PY"
+  echo "Tips: cd $(basename "$SCRIPT_DIR") && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt"
+  exit 1
+fi
+
+exec "$PY" "$SCRIPT_DIR/backup.py" "$@"
diff --git a/backup_zip.py b/backup_zip.py
index 0000000..0000000 100644
--- a/backup_zip.py
+++ b/backup_zip.py
@@ -1,46 +1,112 @@
-# Tidligere skript for zip-backup. Beholdt for kompatibilitet.
-# (Din opprinnelige implementasjon lå her.)
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+"""
+Kompatibilitets-wrapper for tidligere bruksmønster:
+  ./backup.sh 1.06 Frontend_OK
+
+Nå rutes dette til backup.py sin fleksible CLI.
+"""
+from __future__ import annotations
+import os
+import sys
+import shlex
+from pathlib import Path
+from typing import List, Optional
+
+HERE = Path(__file__).resolve().parent
+
+def main(argv: Optional[List[str]] = None) -> int:
+    argv = list(sys.argv[1:] if argv is None else argv)
+
+    # Gammelt mønster: [VERSJON] [TAG]
+    # Nytt mønster krever minst --source. Hvis du tidligere brukte hardkodet
+    # kilde/mapper, sett SOURCE_DEFAULT her (eller les fra env).
+    SOURCE_DEFAULT = os.environ.get("BACKUP_SOURCE_DEFAULT")
+    PROJECT_DEFAULT = os.environ.get("BACKUP_PROJECT_DEFAULT")
+
+    # Hvis nye flagg er brukt, bare videresend til backup.py
+    if any(arg.startswith("--") for arg in argv):
+        return os.execv(sys.executable, [sys.executable, str(HERE / "backup.py"), *argv]) or 0
+
+    # Ellers: to posisjonelle argumenter fra gammel bruk:
+    version = argv[0] if len(argv) >= 1 else None
+    tag = argv[1] if len(argv) >= 2 else None
+
+    if not SOURCE_DEFAULT:
+        print(
+            "[DEPRECATED] Gammelt kall oppdaget. Sett kilde og prosjekt eksplisitt.\n"
+            "Eksempel:\n"
+            "  ./backup.sh --source /sti/til/prosjekt --project mittprosjekt "
+            f"{f'--version {version} ' if version else ''}{f'--tag {tag}' if tag else ''}\n\n"
+            "Tips: Du kan midlertidig sette default via env:\n"
+            "  export BACKUP_SOURCE_DEFAULT=/sti/til/prosjekt\n"
+            "  export BACKUP_PROJECT_DEFAULT=mittprosjekt\n",
+            file=sys.stderr,
+        )
+        return 2
+
+    cmd = [sys.executable, str(HERE / "backup.py"), "--source", SOURCE_DEFAULT]
+    if PROJECT_DEFAULT:
+        cmd += ["--project", PROJECT_DEFAULT]
+    if version:
+        cmd += ["--version", version]
+    if tag:
+        cmd += ["--tag", tag]
+
+    os.execv(sys.executable, cmd)
+    return 0
+
+if __name__ == "__main__":
+    raise SystemExit(main())
diff --git a/dropbox_opplasting.py b/dropbox_opplasting.py
index 0000000..0000000 100644
--- a/dropbox_opplasting.py
+++ b/dropbox_opplasting.py
@@ -1,30 +1,40 @@
-# Tidligere skript for opplasting til Dropbox.
-# (Din opprinnelige implementasjon lå her.)
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+"""
+Kompatibilitets-wrapper for historisk bruk. Videresender til uploader_dropbox.
+"""
+from pathlib import Path
+import os
+import sys
+from typing import Literal
+
+try:
+    from uploader_dropbox import upload_to_dropbox
+except Exception as e:
+    print("Mangler 'uploader_dropbox'. Installer requirements og prøv igjen.", file=sys.stderr)
+    raise
+
+def main(local_path: str, dest_path: str, mode: Literal["add","overwrite"]="add") -> None:
+    token = os.getenv("DROPBOX_TOKEN")
+    if not token:
+        raise SystemExit("DROPBOX_TOKEN mangler (sett i miljø eller .env).")
+    upload_to_dropbox(Path(local_path), dest_path, token=token, mode=mode)
+
+if __name__ == "__main__":
+    if len(sys.argv) < 3:
+        print("Bruk: dropbox_opplasting.py /lokal/fil.zip /Dropbox/destinasjon/fil.zip [add|overwrite]", file=sys.stderr)
+        raise SystemExit(2)
+    mode = sys.argv[3] if len(sys.argv) >= 4 else "add"
+    main(sys.argv[1], sys.argv[2], mode=mode)  # type: ignore[arg-type]
